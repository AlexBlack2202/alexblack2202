<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deeplearning on Phạm Duy Tùng Machine Learning Blog</title>
    <link>/tags/deeplearning/</link>
    <description>Recent content in Deeplearning on Phạm Duy Tùng Machine Learning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Phạm Duy Tùng. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 13 Dec 2019 00:19:00 +0300</lastBuildDate><atom:link href="/tags/deeplearning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tìm hiểu Non-maximum Suppression (NMS)</title>
      <link>/blog/2019-12-25-nms/</link>
      <pubDate>Fri, 13 Dec 2019 00:19:00 +0300</pubDate>
      
      <guid>/blog/2019-12-25-nms/</guid>
      <description>Đặt vấn đề Sau khi thực hiện object detection feed một ảnh qua mạng neural, chúng ta sẽ thu được rất nhiều proposals (như hình ở dưới). Ở trạng thái này, có rất nhiều proposals là boding box cho một object duy nhất, điều này dẫn tới việc dư thừa. Chúng ta sử dụng thuật toán Non-maximum suppression (NMS) để giải quyết bài toán này.
Hình 1: Proposals box, hình được cắt từ bài báo</description>
    </item>
    
    <item>
      <title>Phân loại hoa sử dụng pretrain model</title>
      <link>/blog/2019-04-15-phan-loai-hoa/</link>
      <pubDate>Mon, 15 Apr 2019 00:19:00 +0300</pubDate>
      
      <guid>/blog/2019-04-15-phan-loai-hoa/</guid>
      <description>Lời mở đầu Ở trong bài viết này, chúng ta sẽ sử dụng tập dữ liệu là tập dữ liệu ở ở link https://www.kaggle.com/alxmamaev/flowers-recognition. Tập dữ liệu này bao gồm 4242 hình cảnh của 5 loại hoa hồng (rose), hoa mặt trời (sunflower), hoa bồ công anh (dandelion), hoa cúc (daisy) và hoa tulip. Nhóm tác giả đã thu thập dữ liệu dựa trên các trang web flicr, google images, yandex.</description>
    </item>
    
    <item>
      <title>Lựa chọn siêu tham số cho mô hình LSTM đơn giản sử dụng Keras</title>
      <link>/blog/2019-02-06-choosing-the-right-hyperparameters-for-a-simple-lstm-using-keras/</link>
      <pubDate>Wed, 06 Feb 2019 00:20:00 +0300</pubDate>
      
      <guid>/blog/2019-02-06-choosing-the-right-hyperparameters-for-a-simple-lstm-using-keras/</guid>
      <description>Mở đầu Việc xây dựng một mô hình machine learning chưa bao giờ thật sự dễ dàng. Rất nhiều bài báo chỉ &amp;ldquo;show hàng&amp;rdquo; những thứ cao siêu, những thứ chỉ nằm trong sự tưởng tượng của chính các nhà báo. Còn khi đọc các bài báo khoa học về machine learning, tác giả công bố cho chúng ta những mô hình rất tốt, giải quyết một domain nhỏ vấn đề của họ.</description>
    </item>
    
    <item>
      <title>Giảm bộ nhớ sử dụng trong python</title>
      <link>/blog/2019-02-06-how-to-reduce-memory-consumption-by-half-by-adding-just-one-line-of-code/</link>
      <pubDate>Wed, 06 Feb 2019 00:19:00 +0300</pubDate>
      
      <guid>/blog/2019-02-06-how-to-reduce-memory-consumption-by-half-by-adding-just-one-line-of-code/</guid>
      <description>Mở đầu Bắt đầu bằng một class đơn giản như sau:
1class DataItem(object): 2def __init__(self, name, age, address): 3self.name = name 4self.age = age 5self.address = address Bạn nghĩ một đối tượng của class trên sẽ chiếm bao nhiêu bộ nhớ. Chúng ta cùng tiến hành một vài thí nghiệm nho nhỏ bên dưới.
1dx = DataItem(&amp;#34;Alex Black&amp;#34;, 42, &amp;#34;-&amp;#34;) 2print (&amp;#34;sys.getsizeof(dx):&amp;#34;, sys.getsizeof(dx)) 3&amp;gt;&amp;gt; sys.getsizeof(dx): 56 Kết quả ra là 56 bytes, khá hợp lý phải không các bạn.</description>
    </item>
    
    <item>
      <title>5 mẹo hay sử dụng python</title>
      <link>/blog/2019-02-05-5-python-tricks-you-need-to-know-today/</link>
      <pubDate>Tue, 05 Feb 2019 00:19:00 +0300</pubDate>
      
      <guid>/blog/2019-02-05-5-python-tricks-you-need-to-know-today/</guid>
      <description>Mở đầu Hiện nay, có rất nhiều thư viện do cộng đồng đóng góp và xây dựng. Ví dụ như biopython trong tin sinh học, pandas (data science), keras/tensorflow (machine learning), astropy ( cho thiên văn học - astronomy). Trước khi bắt đầu đọc bài viết này, bạn đên đọc &amp;ldquo;Python Tricks Book&amp;rdquo; của Dan Bader trước (https://dbader.org/products/python-tricks-book/). Trong sách, anh ấy đã chia sẻ một số lời khuyên và mẹo về các code python hiệu quả hơn.</description>
    </item>
    
    <item>
      <title>Hệ thống gợi ý khoá học cho website DonorChoose.org</title>
      <link>/blog/2019-01-03-donor-project-matching-with-recommender-systems/</link>
      <pubDate>Tue, 11 Dec 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2019-01-03-donor-project-matching-with-recommender-systems/</guid>
      <description>Đặt vấn đề DonorsChoose.org được thành lập vào năm 2000 bởi một giáo viên lịch sử tại Mỹ tên là Bronx và đã huy động được 685 triệu đô la cho các lớp học. 3/4 các giáo viên ở các trường công lập ở Hoa Kỳ đã sử dụng Donor để gửi các yêu cầu bài tập cho học sinh. Từ đó, Donor trở thành nền tảng giáo dục hàng đầu hỗ trợ cho các vấn đề giáo dục công cộng.</description>
    </item>
    
    <item>
      <title>Một số mẹo để lựa chọn mô hình object detection</title>
      <link>/blog/2018-12-11-a-bunch-of-tips-and-tricks-for-training-deep-neural-networks/</link>
      <pubDate>Tue, 11 Dec 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-12-11-a-bunch-of-tips-and-tricks-for-training-deep-neural-networks/</guid>
      <description>Lời mở đầu Việc huấn luyện một mô hình neural network khá đơn giản, chỉ việc download code mẫu về, quăng tập data của mình vào, rồi cho chạy, xong. Nhưng khó khăn ở đây là làm cách nào để nâng độ chính xác của mô hình lên. Ở bài viết này, chúng ta sẽ tìm hiểu một số cách giúp tăng độ chính xác của mô hình.
Kiểm tra dữ liệu   Thực chất, chúng ta phải hiểu rõ kỹ chúng ta đang có những gì trong tay, thì chúng ta mới dạy cho máy học đủ và đúng được.</description>
    </item>
    
    <item>
      <title>Lựa chọn mô hình object detectors</title>
      <link>/blog/2018-12-10-design-choices-lessons-learned-and-trends-for-object-detections/</link>
      <pubDate>Mon, 10 Dec 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-12-10-design-choices-lessons-learned-and-trends-for-object-detections/</guid>
      <description>Lời mở đầu Các thuật toán phát hiện đối tượng, như các thuật toán thuộc nhóm region proposal hoặc single shot đầu bắt đầu bởi những ý tưởng khác nhau, nhưng sau qua một vài quá trình cập nhật và nâng cấp cho đến thời điểm hiện tại, mô hình chung của chúng đã gần gần giống nhau hơn. Và hai thuật toán trên là hai thuật toán tiêu biểu cạnh tranh nhau danh hiệu thuật toán phát hiện đối tượng nhanh nhất và thuật toán nhận diện chính xác nhất.</description>
    </item>
    
    <item>
      <title>Tìm hiểu single shot object detectors</title>
      <link>/blog/2018-12-06-what-do-we-learn-from-single-shot-object-detection/</link>
      <pubDate>Thu, 06 Dec 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-12-06-what-do-we-learn-from-single-shot-object-detection/</guid>
      <description>Single Shot detectors Ở bài trước, chúng ta đã tìm hiểu về region proposal và ứng dụng của nó vào Faster R-CNN. Các thuật toán thuộc nhóm region proposal tuy cho kết quả có độ chính xác cao, nhưng chúng có một nhược điểm rất lớn là thời gian huấn luyện và đưa quyết định rất chậm. Faster R-CNN xử lý khoảng 7 FPS trên tập dữ liệu PASCAL VOC 2007.</description>
    </item>
    
    <item>
      <title>Tìm hiểu region based object detectors</title>
      <link>/blog/2018-12-05-what-do-we-learn-from-object-detection-p1/</link>
      <pubDate>Wed, 05 Dec 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-12-05-what-do-we-learn-from-object-detection-p1/</guid>
      <description>Sliding-window detectors Bắt đầu từ năm 2012, sau khi mạng AlexNet giành giải nhất cuộc thi 2012 ILSVRC, mọi nghiên cứu về phân lớp dữ liệu đều sử dụng mạng CNN. Kể từ đó đến đây, CNN được coi như là thuật toán thống trị trên mọi publish paper về các bài toán phân lớp đối tượng. Trong khi đó, để nhận dạng 1 đối tượng trong ảnh, các đơn giản nhất là thiết lập một cửa sổ trượt có kích thước là window size trượt từ trái qua phải, từ trên xuống dưới, quét qua toàn bộ bức ảnh.</description>
    </item>
    
    <item>
      <title>Phân tích giỏ hàng của website instacart</title>
      <link>/blog/2018-11-13-instacart-market-basket-analysis/</link>
      <pubDate>Tue, 13 Nov 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-11-13-instacart-market-basket-analysis/</guid>
      <description>Lời mở đầu Instacart là một startup cung ứng đồ tạp hóa qua website và ứng dụng di động. Người dùng chỉ cần chọn đồ muốn mua tại các chuỗi bán lẻ và đặt đồ, Instacart sẽ đi mua và giao đến tận tay họ. Đến nay, Instacart hoạt động tại 15.000 cửa hàng tạp hoá tại 4.000 thành phố với khoảng 50.000 “trợ lý mua sắm”. Team data science của instacart đóng vai trò rất quan trọng trong việc cung cấp trải nghiệm người dùng trong việc sử dụng app để mua hàng.</description>
    </item>
    
    <item>
      <title>Dự đoán giá chứng khoán SP500 sử dụng LSTM</title>
      <link>/blog/2018-11-10-stock-prediction_v1/</link>
      <pubDate>Sat, 10 Nov 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-11-10-stock-prediction_v1/</guid>
      <description>Lời mở đầu Ở bài viết này, mình sẽ xây dựng mô hình hơn giản để áp dụng vào tập dữ liệu giá chứng khoáng. Mục tiêu của bài này là chúng ta sẽ dự đoán chỉ số S&amp;amp;P 500 sử dụng LSTM. Các bạn có nhu cầu tìm hiểu thêm về chỉ số sp 500 có thể đọc thêm ở https://vi.wikipedia.org/wiki/S%26P_500. Đây là một ứng dụng nhỏ, không có ý nghĩa nhiều ở thực tế do khi phân tích chứng khoán, ta còn xét thêm rất nhiều yếu tố phụ nữa.</description>
    </item>
    
    <item>
      <title>Overview of gradient descent optimization algorithm</title>
      <link>/blog/2018-11-01-overview-of-gradient-descent-optimization-algorithm/</link>
      <pubDate>Mon, 29 Oct 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-11-01-overview-of-gradient-descent-optimization-algorithm/</guid>
      <description>Lời mở đầu Sau khi thực hiện bài phân loại chó mèo bằng keras, mình phát hiện rằng keras có hỗ trợ rất nhiều thuật toán tối ưu hoá https://keras.io/optimizers/. Nhân dịp rãnh rỗi, mình sẽ tổng hợp lại một vài thuật toán mà keras hỗ trợ.
Dẫn nhập Tại thời điểm hiện tại, Gradient descent là một trong những thuật toán phổ biến được sử dụng để tối ưu hoá mạng neural networks.</description>
    </item>
    
    <item>
      <title>Phân loại chó mèo sử dụng pretrain model</title>
      <link>/blog/2018-10-29-phan-loai-cho-meo/</link>
      <pubDate>Mon, 29 Oct 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-10-29-phan-loai-cho-meo/</guid>
      <description>Lời mở đầu Bài toán phân loại chó mèo là bài toán khá cũ tại thời điểm hiện tại. Tuy nhiên, đối với các bạn mới bước chân vào con đường machine learning thì đây là một trong những bài toán cơ bản để các bạn thực hành sử dụng và tìm hiểu thư viện mà mình đang có. Ở đây, chúng ta sẽ sử dụng pretrain model có sẵn của kares áp dụng trên tập dữ liệu.</description>
    </item>
    
    <item>
      <title>Mask R-CNN trong bài toán nhận dạng và phân vùng đối tượng</title>
      <link>/blog/2018-10-08-mask-rnn/</link>
      <pubDate>Mon, 08 Oct 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-10-08-mask-rnn/</guid>
      <description>Lời mở đầu Phân vùng đối tượng là một bài toán khá phổ biến trong lĩnh vực computer vision. Trong open cv có hỗ trợ cho chúng ta một số hàm để phân vùng đối tượng rất dễ sử dụng. Đặc điểm chung của các hàm này là độ chính xác không được cao cho lắm. Ở bài viết này, chúng ta sẽ tìm hiểu cách sử dụng mô hình pretrain của DNN để phân vùng các đối tượng trong ảnh.</description>
    </item>
    
    <item>
      <title>Deep Learning based Multiple Human Pose Estimation using OpenCV</title>
      <link>/blog/2018-10-05-deep-learning-base-multiple-human-pose-estimation/</link>
      <pubDate>Fri, 05 Oct 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-10-05-deep-learning-base-multiple-human-pose-estimation/</guid>
      <description>Lời mở đầu Lưu ý: Để sử dụng được các mô hình trong bài viết này, bạn phải sử dụng phiên bản opencv &amp;gt; 3.4.1.
Ở bài viết trước, chúng ta đã tìm hiểu cách thức rút trích khung xương sử dụng DNN và đã áp dụng thành công trên ảnh có chứa 1 đối tượng người. Trong bài viết này, chúng ta sẽ thực hiện áp dụng mô hình cho bài toán có nhiều người trong cùng 1 bức ảnh.</description>
    </item>
    
    <item>
      <title>Deep Learning based Human Pose Estimation using OpenCV</title>
      <link>/blog/2018-10-04-deep-learning-base-human-pose-estimation/</link>
      <pubDate>Thu, 04 Oct 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-10-04-deep-learning-base-human-pose-estimation/</guid>
      <description>Lời mở đầu Để sử dụng được các mô hình trong bài viết này, bạn phải sử dụng phiên bản opencv &amp;gt; 3.4.1.
Pose Estimation là gì? 
Post Estimation ( đôi khi được dùng với thuật ngữ Keypoint Detection) là một vấn đề khá phổ biến trong lĩnh vực xử lý ảnh khi chúng ta cần xác định vị trí và hướng của một đối tượng. Mức ý nghĩa ở đây là chúng ta phải rút ra được những đặc điểm chính, những đặc điểm đó là những đặc trưng của đối tượng ( có thể mô tả được đối tượng).</description>
    </item>
    
    <item>
      <title>Phân biệt Epoch - Batch size và Iterations</title>
      <link>/blog/2018-10-02-understanding-epoch-batchsize-iterations/</link>
      <pubDate>Tue, 02 Oct 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-10-02-understanding-epoch-batchsize-iterations/</guid>
      <description>Lời mở đầu Khi mới bắt đầu bước vào thế giới của ML/DL chúng ta sẽ bắt gặp các thuật ngữ Epoch - Batch size và Iterations. Và sẽ cảm thấy bối rối vì chúng khá giống nhau, nhưng thực tế là chúng khác xa nhau.
Để cho dễ hình dung, mình lấy ví dụ về việc ăn cơm. Chúng ta không thể ăn một lần hết một chén cơm được, mà phải mỗi lần ăn phải xúc từng muỗn ăn.</description>
    </item>
    
    <item>
      <title>Xây dựng chương trình gợi ý phim dựa vào tập dữ liệu movie len</title>
      <link>/blog/2018-10-01-buiding-a-movie-model/</link>
      <pubDate>Mon, 01 Oct 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-10-01-buiding-a-movie-model/</guid>
      <description>Lời mở đầu MovieLens là một tập dữ liệu được sử dụng rộng rãi cách đây nhiều năm. Hôm nay, mình sẽ sử dụng tập dữ liệu này và mô hình ALS của spark để xây dựng chương trình dự đoán phim cho người dùng.
Chuẩn bị dữ liệu Các bạn có thể download tập dữ liệu MovieLens ở link https://grouplens.org/datasets/movielens/. Các bạn có thể download trực tiếp 2 file nén ở link http://files.</description>
    </item>
    
    <item>
      <title>Tìm hiểu về mạng neural network AlexNet</title>
      <link>/blog/2018-06-15-understanding-alexnet/</link>
      <pubDate>Fri, 15 Jun 2018 00:19:00 +0300</pubDate>
      
      <guid>/blog/2018-06-15-understanding-alexnet/</guid>
      <description>Lời mở đầu Tỷ phú Peter Thiel đã từng đưa ra câu hỏi tréo ngoe như thế này: &amp;ldquo;What important truth do very few people agree with you on?&amp;rdquo;
Nếu bạn đem câu này hỏi giáo sư Geoffrey Hinton vào năm 2010, ông ấy sẽ trả lời rằng mạng Convolutional Neural Networks (CNN) sẽ có bước đột phá lớn và giúp chúng ta giải quyết hoàn toàn bài toán phân loại ảnh.</description>
    </item>
    
  </channel>
</rss>
